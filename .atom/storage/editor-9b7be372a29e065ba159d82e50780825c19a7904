{"mode":"editor","version":1,"windowDimensions":{"x":618,"y":23,"width":1187,"height":800,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/sanoy/code/savaho/public/javascripts"],"buffers":[{"text":"// Angular module, defining routes for the app\nangular.module('polls', ['pollServices']).\n\tconfig(['$routeProvider', function($routeProvider) {\n\t\t$routeProvider.\n\t\t\twhen('/polls', { templateUrl: 'partials/list.html', controller: PollListCtrl }).\n\t\t\twhen('/poll/:pollId', { templateUrl: 'partials/item.html', controller: PollItemCtrl }).\n\t\t\twhen('/new', { templateUrl: 'partials/new.html', controller: PollNewCtrl }).\n\t\t\t// If invalid route, just redirect to the main list view\n\t\t\totherwise({ redirectTo: '/polls' });\n\t}]);\n\t\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":10,"column":1},"end":{"row":10,"column":1}},"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":4,"undoStack":[{"type":"group-start","snapshot":{"0":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[10,1]],"oldText":"","newText":"// Angular module, defining routes for the app\nangular.module('polls', ['pollServices']).\n\tconfig(['$routeProvider', function($routeProvider) {\n\t\t$routeProvider.\n\t\t\twhen('/polls', { templateUrl: 'partials/list.html', controller: PollListCtrl }).\n\t\t\twhen('/poll/:pollId', { templateUrl: 'partials/item.html', controller: PollItemCtrl }).\n\t\t\twhen('/new', { templateUrl: 'partials/new.html', controller: PollNewCtrl }).\n\t\t\t// If invalid route, just redirect to the main list view\n\t\t\totherwise({ redirectTo: '/polls' });\n\t}]);\n\t"}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[10,1],[10,1]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[10,1],[10,1]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[10,1],[10,1]],"newRange":[[10,1],[11,0]],"oldText":"","newText":"\n"}},{"type":"group-end","snapshot":{"0":{"range":[[10,1],[10,1]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/sanoy/code/savaho/public/javascripts/app.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b02505917043881b413b21c0b8bf183626bcbe7b","preferredLineEnding":"\n","deserializer":"TextBuffer","version":2},{"text":"// Controller for the poll list\nfunction PollListCtrl($scope, Poll) {\n\t$scope.polls = Poll.query();\n}\n\n// Controller for an individual poll\nfunction PollItemCtrl($scope, $routeParams, socket, Poll) {\n\t$scope.poll = Poll.get({pollId: $routeParams.pollId});\n\n\tsocket.on('myvote', function(data) {\n\t\tconsole.dir(data);\n\t\tif(data._id === $routeParams.pollId) {\n\t\t\t$scope.poll = data;\n\t\t}\n\t});\n\n\tsocket.on('vote', function(data) {\n\t\tconsole.dir(data);\n\t\tif(data._id === $routeParams.pollId) {\n\t\t\t$scope.poll.choices = data.choices;\n\t\t\t$scope.poll.totalVotes = data.totalVotes;\n\t\t}\n\t});\n\n\t$scope.vote = function() {\n\t\tvar pollId = $scope.poll._id,\n\t\t\t\tchoiceId = $scope.poll.userVote;\n\n\t\tif(choiceId) {\n\t\t\tvar voteObj = { poll_id: pollId, choice: choiceId };\n\t\t\tsocket.emit('send:vote', voteObj);\n\t\t} else {\n\t\t\talert('You must select an option to vote for');\n\t\t}\n\t};\n}\n\n// Controller for creating a new poll\nfunction PollNewCtrl($scope, $location, Poll) {\n\t// Define an empty poll model object\n\t$scope.poll = {\n\t\tquestion: '',\n\t\tchoices: [ { text: '' }, { text: '' }, { text: '' }]\n\t};\n\n\t// Method to add an additional choice option\n\t$scope.addChoice = function() {\n\t\t$scope.poll.choices.push({ text: '' });\n\t};\n\n\t// Validate and save the new poll to the database\n\t$scope.createPoll = function() {\n\t\tvar poll = $scope.poll;\n\n\t\t// Check that a question was provided\n\t\tif(poll.question.length > 0) {\n\t\t\tvar choiceCount = 0;\n\n\t\t\t// Loop through the choices, make sure at least two provided\n\t\t\tfor(var i = 0, ln = poll.choices.length; i < ln; i++) {\n\t\t\t\tvar choice = poll.choices[i];\n\n\t\t\t\tif(choice.text.length > 0) {\n\t\t\t\t\tchoiceCount++\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(choiceCount > 1) {\n\t\t\t\t// Create a new poll from the model\n\t\t\t\tvar newPoll = new Poll(poll);\n\n\t\t\t\t// Call API to save poll to the database\n\t\t\t\tnewPoll.$save(function(p, resp) {\n\t\t\t\t\tif(!p.error) {\n\t\t\t\t\t\t// If there is no error, redirect to the main view\n\t\t\t\t\t\t$location.path('polls');\n\t\t\t\t\t} else {\n\t\t\t\t\t\talert('Could not create poll');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\talert('You must enter at least two choices');\n\t\t\t}\n\t\t} else {\n\t\t\talert('You must enter a question');\n\t\t}\n\t};\n}\n","markerStore":{"nextMarkerId":10,"markersById":{"0":{"range":{"start":{"row":59,"column":11},"end":{"row":59,"column":11}},"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":5,"undoStack":[{"type":"group-start","snapshot":{"0":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[87,1]],"oldText":"","newText":"// Controller for the poll list\nfunction PollListCtrl($scope, Poll) {\n\t$scope.polls = Poll.query();\n}\n\n// Controller for an individual poll\nfunction PollItemCtrl($scope, $routeParams, socket, Poll) {\t\n\t$scope.poll = Poll.get({pollId: $routeParams.pollId});\n\t\n\tsocket.on('myvote', function(data) {\n\t\tconsole.dir(data);\n\t\tif(data._id === $routeParams.pollId) {\n\t\t\t$scope.poll = data;\n\t\t}\n\t});\n\t\n\tsocket.on('vote', function(data) {\n\t\tconsole.dir(data);\n\t\tif(data._id === $routeParams.pollId) {\n\t\t\t$scope.poll.choices = data.choices;\n\t\t\t$scope.poll.totalVotes = data.totalVotes;\n\t\t}\t\t\n\t});\n\t\n\t$scope.vote = function() {\n\t\tvar pollId = $scope.poll._id,\n\t\t\t\tchoiceId = $scope.poll.userVote;\n\t\t\n\t\tif(choiceId) {\n\t\t\tvar voteObj = { poll_id: pollId, choice: choiceId };\n\t\t\tsocket.emit('send:vote', voteObj);\n\t\t} else {\n\t\t\talert('You must select an option to vote for');\n\t\t}\n\t};\n}\n\n// Controller for creating a new poll\nfunction PollNewCtrl($scope, $location, Poll) {\n\t// Define an empty poll model object\n\t$scope.poll = {\n\t\tquestion: '',\n\t\tchoices: [ { text: '' }, { text: '' }, { text: '' }]\n\t};\n\t\n\t// Method to add an additional choice option\n\t$scope.addChoice = function() {\n\t\t$scope.poll.choices.push({ text: '' });\n\t};\n\t\n\t// Validate and save the new poll to the database\n\t$scope.createPoll = function() {\n\t\tvar poll = $scope.poll;\n\t\t\n\t\t// Check that a question was provided\n\t\tif(poll.question.length > 0) {\n\t\t\tvar choiceCount = 0;\n\t\t\t\n\t\t\t// Loop through the choices, make sure at least two provided\n\t\t\tfor(var i = 0, ln = poll.choices.length; i < ln; i++) {\n\t\t\t\tvar choice = poll.choices[i];\n\t\t\t\t\n\t\t\t\tif(choice.text.length > 0) {\n\t\t\t\t\tchoiceCount++\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tif(choiceCount > 1) {\n\t\t\t\t// Create a new poll from the model\n\t\t\t\tvar newPoll = new Poll(poll);\n\t\t\t\t\n\t\t\t\t// Call API to save poll to the database\n\t\t\t\tnewPoll.$save(function(p, resp) {\n\t\t\t\t\tif(!p.error) {\n\t\t\t\t\t\t// If there is no error, redirect to the main view\n\t\t\t\t\t\t$location.path('polls');\n\t\t\t\t\t} else {\n\t\t\t\t\t\talert('Could not create poll');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\talert('You must enter at least two choices');\n\t\t\t}\n\t\t} else {\n\t\t\talert('You must enter a question');\n\t\t}\n\t};\n}"}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[87,1],[87,1]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[59,11],[59,11]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[70,0],[70,4]],"newRange":[[70,0],[70,0]],"oldText":"\t\t\t\t","newText":""}},{"type":"change","content":{"oldRange":[[66,0],[66,2]],"newRange":[[66,0],[66,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[61,0],[61,4]],"newRange":[[61,0],[61,0]],"oldText":"\t\t\t\t","newText":""}},{"type":"change","content":{"oldRange":[[57,0],[57,3]],"newRange":[[57,0],[57,0]],"oldText":"\t\t\t","newText":""}},{"type":"change","content":{"oldRange":[[53,0],[53,2]],"newRange":[[53,0],[53,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[49,0],[49,1]],"newRange":[[49,0],[49,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[44,0],[44,1]],"newRange":[[44,0],[44,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[27,0],[27,2]],"newRange":[[27,0],[27,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[23,0],[23,1]],"newRange":[[23,0],[23,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[21,3],[21,5]],"newRange":[[21,3],[21,3]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[15,0],[15,1]],"newRange":[[15,0],[15,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[8,0],[8,1]],"newRange":[[8,0],[8,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[6,59],[6,60]],"newRange":[[6,59],[6,59]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[87,1],[87,1]],"newRange":[[87,1],[88,0]],"oldText":"","newText":"\n"}},{"type":"group-end","snapshot":{"0":{"range":[[59,11],[59,11]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/sanoy/code/savaho/public/javascripts/controllers.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2b3604c8a5e1e2b43528263158746fe49c768d71","preferredLineEnding":"\n","deserializer":"TextBuffer","version":2},{"text":"// Angular service module for connecting to JSON APIs\nangular.module('pollServices', ['ngResource']).\n\tfactory('Poll', function($resource) {\n\t\treturn $resource('polls/:pollId', {}, {\n\t\t\t// Use this method for getting a list of polls\n\t\t\tquery: { method: 'GET', params: { pollId: 'polls' }, isArray: true }\n\t\t})\n\t}).\n\tfactory('socket', function($rootScope) {\n\t\tvar socket = io.connect();\n\t\treturn {\n\t\t\ton: function (eventName, callback) {\n\t      socket.on(eventName, function () {\n\t        var args = arguments;\n\t        $rootScope.$apply(function () {\n\t          callback.apply(socket, args);\n\t        });\n\t      });\n\t    },\n\t    emit: function (eventName, data, callback) {\n\t      socket.emit(eventName, data, function () {\n\t        var args = arguments;\n\t        $rootScope.$apply(function () {\n\t          if (callback) {\n\t            callback.apply(socket, args);\n\t          }\n\t        });\n\t      })\n\t    }\n\t\t};\n\t});\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":3,"column":15},"end":{"row":3,"column":15}},"properties":{"type":"selection","editorId":16,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":5,"undoStack":[{"type":"group-start","snapshot":{"0":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":16,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[30,4]],"oldText":"","newText":"// Angular service module for connecting to JSON APIs\nangular.module('pollServices', ['ngResource']).\n\tfactory('Poll', function($resource) {\n\t\treturn $resource('polls/:pollId', {}, {\n\t\t\t// Use this method for getting a list of polls\n\t\t\tquery: { method: 'GET', params: { pollId: 'polls' }, isArray: true }\n\t\t})\n\t}).\n\tfactory('socket', function($rootScope) {\n\t\tvar socket = io.connect();\n\t\treturn {\n\t\t\ton: function (eventName, callback) {\n\t      socket.on(eventName, function () {  \n\t        var args = arguments;\n\t        $rootScope.$apply(function () {\n\t          callback.apply(socket, args);\n\t        });\n\t      });\n\t    },\n\t    emit: function (eventName, data, callback) {\n\t      socket.emit(eventName, data, function () {\n\t        var args = arguments;\n\t        $rootScope.$apply(function () {\n\t          if (callback) {\n\t            callback.apply(socket, args);\n\t          }\n\t        });\n\t      })\n\t    }\n\t\t};\n\t});"}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[30,4],[30,4]],"properties":{"type":"selection","editorId":16,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[3,15],[3,15]],"properties":{"type":"selection","editorId":16,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[12,41],[12,43]],"newRange":[[12,41],[12,41]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[30,4],[30,4]],"newRange":[[30,4],[31,0]],"oldText":"","newText":"\n"}},{"type":"group-end","snapshot":{"0":{"range":[[3,15],[3,15]],"properties":{"type":"selection","editorId":16,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/sanoy/code/savaho/public/javascripts/services.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"9bc1aafc4c42bd2ba185ec52e3c36c3381115591","preferredLineEnding":"\n","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sanoy/code/savaho/public/javascripts/app.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":12,"softTabs":true,"displayBuffer":{"id":13,"softWrapped":false,"scrollTop":1013,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sanoy/code/savaho/public/javascripts/controllers.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":16,"softTabs":true,"displayBuffer":{"id":17,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sanoy/code/savaho/public/javascripts/services.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/sanoy/code/savaho/public/javascripts/services.js","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-javascript","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/sanoy/code/savaho/public/javascripts/app.js":1441289985159,"/Users/sanoy/code/savaho/public/javascripts/controllers.js":1441289989729,"/Users/sanoy/code/savaho/public/javascripts/services.js":1441290018681},"metrics":{"sessionLength":59205},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/sanoy/code/savaho/public/javascripts":{"isExpanded":true,"entries":{}}},"hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}