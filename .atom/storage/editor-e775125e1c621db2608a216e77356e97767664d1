{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":23,"width":1440,"height":873,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/sanoy/code/fatalshootings/fatalshootings"],"buffers":[{"text":"Application to explore data from [Fatal Encounters](http://fatalencounters.org).\n\nThis Application runs on heroku so, you will not have to worry about installing all the sevral dependencies required to run this application!\n\n##Table of Contents\n\n* [Setup](#setup)\n \t* [Clone the Project](#clone-the-project)\n \t* [Run web app](#run-localweb-server)\n* [Application Architecture](#application-architecture)\n* [API](#api)\n \t* [Database Access](#database-access)\n \t\t* [mongodb()](#mongodb)\n \t\t* [req._db](#req_db)\n \t* [Routes](#routes)\n \t* [Views](#views)\n  \t\t* [Template](#template)\n  \t\t* [Model](#model)\n  \t\t\t* [export model function](#export-model-function)\n  \t\t* [Using Views](#using-views)\n  \t\t \t* [getView()](#getview)\n  \t\t\t* [renderView()](#renderview)\n* [Logging](#logging)\n\t* [getLog()](#getlog)\n\t* [log()](#log)\n\t* [Log Levels](#log-levels)\n\t* [Log Output](#log-output)\n* [Requirements Documentation](#requirements-documentation)\n* [Features](#features)\n\n##clone The Project\n\n$ git clone https://github.com/JustOpenSource/fatalshootings.git\n$ cd fatalshootings\n```\n### Starting the application\n\nRun:\nheroku local web\n\nBrowse to [localhost:5000/list/](localhost:5000/list/).\n\n##Application Architecture\n\n###Database\n\nThe database, so far, is a single mongo collection. Each record is based off of the [entry schema](https://github.com/JustOpenSource/fatalshootings/blob/master/shared-utils/schemas/entry.json).\ncal web\n\n\n###Shared Components\n\nRoot directories prefixed with \"shared-\" are accessible by all apps.\n\nThe shared-config/constants.js file should be included in every file to access constant values and the logger function.\n\n###Applications\n\nExplore and Admin are independent express applications and run on separate ports.\n\nRoutes are managed via express. The route roots are defined within bin/www and the route files are in app/routes.\n\nGet and Post url end points requests are handled in app/routes.\n\nViews are in /shared-views and contain mustache templates paired with JavaScript model functions that passes a data object to the template.\n\nA node JS API lets you use the views.\n\n###Accessibility\n\nAll basic functionality must work without JavaScript.\n\nAll pages must be responsive and support mobile, tablet, and desktop.\n\nAll UI control strings must be internationalizable.\n\n###Explore Application\n\nPublic facing data explorer.\n\n####List\n\nList of all records.\n\n* Search by Name\n* Filter by Cause, Sex, Race, Country, State, City, Zip, Coordinates + Range, Date Range.\n* list of records\n* Pagination\n\n####Entry\n\nAn individual record's complete details.\n\n###Admin Applicarion\n\n###Sys Admin\n\nSet of utilities and datasets used by engineers in thdevelopment and maintenance of he applications.\n\n##API\n\n###Database Access\n\n####mongodb()\n\nTo access the mongo db from outside of a running application, you can use the mongo-db utility.  This can be used for utilities that are meant to be run outside of the express application.  For database access within the application, see [req._db](#req_db)\n\n```\nvar mongodb = require('shared-utils/mongo-db');\n\n/**\n * mongodb\n * @param databaseName {string} name of the mongo database to access\n * @param cb {function} callback for the mongo database connection\n */\nmongodb('database-name', cb);\n\n/**\n * cb\n * @param err {object} connection error or null\n * @param db {object} a mongo database instance\n * @param close {function} close function must be called after you get your data\n */\nfunction cb(err, db, close){\n\tif(err){\n\t\t//handle error\n\t}\n\n\tdb.collection('collection-name')\n\t.find({})\n\t.toArray(function(err, body){\n\n\t\tif(err){\n\t\t \t//handle error\n\t\t}\n\n\t\t//do stuff with data\n\n\t\t//close the db connection once you have the data\n\t\tclose();\n\n\t});\n```\n\n####req._db\n\nFrom within a route request, you can access database collections with the `_db` property on `req`. For an example, see [Routes](#routes).\n\nThe collection is a [node mongodb](https://github.com/mongodb/node-mongodb-native) collection.  \n\n###Routes\n\nRoutes are handled by express [router.route()](http://expressjs.com/api.html#router).\n\n```\nrouter.route('/').get(function(req, res){\n\tvar collection = req._db.fatalities;\n});\n```\n\n###Views\n\n**Note**: Currently the view utilities only work with views in `/shared-views`.\n\nViews are template/model pairs.  The template provides the markup and the model returns a data object in the format expected by the template.\n\nTo create a new template/model, create an html and a js file with the same name in `/shared-views`.\n\n```\ntouch shared-views/view-name.html\ntouch shared-views/view-name.js\n```\n\n####Template\nThe html file is a [mustache template](https://github.com/janl/mustache.js).\n\n####Model\nThe js file `module.exports` a function called `getModel` that returns a json object in the format that the html template expects.\n\n#####export model function()\n\nThere are two ways to write models, either synchronously or asynchronously.  \n\n######synchronous\n```\n/**\n * export model\n * @param d {object} the data passed into the model\n * @returns data {object} the processed data object in the format expected by the template\n */\nmodule.exports = function(d){\n\n\t//processed data object in the format that the html template expects\n\treturn {};\n};\n```\n\n######asynchronous\n```\n/**\n * export model\n * @param d {object} the data passed into the model\n * @param cb {function} a function to runs once the data is available\n */\nmodule.exports = function(d, cb){\n\n\t//processed data object in the format that the html template expects\n\tvar data = {};\n\n\t/**\n\t * cb\n\t * @param err {string || null}  error message or null\n\t * @param data {object} data object expected by the html template\n\t */\n\tcb(err, data);\n}\n;\n```\n\n####Using Views\n\n#####getView()\n\nTo get a view, use the `getView()` utility. You can use this method on synchronous or asynchronous models.\n\n```\nvar getView = require('shared-utils/get-view');\n\n/**\n * getView\n * SYNCHRONOUSE USAGE\n * @param template {string} name of template/model pair\n * @param data {object} data being passed into the model\n * @returns view {object} {\n *\thtml {string} rendered template after applying data\n *\tdata {object} data\n *\ttemplate {string} template html before applying data\n * }\n */\nvar myView = getView('view-name', data);\n\n/**\n * getView\n * ASYNCHRONOUSE USAGE\n * @param template {string} name of template/model pair\n * @param data {object} data being passed into the model\n * @param cb {function}\n */\ngetView('view-name', data, cb);\n\n/**\n * cb\n * @param err {object} error message or null\n * @param view {object} {\n *\thtml {string} rendered template after applying data\n *\tdata {object} data\n *\ttemplate {string} template html before applying data\n * }\n */\nfunction cb(err, view){\n\tconsole.log(view);\n}\n```\n\n#####renderView()\n\nThe `renderView()` is used inside the route callback and expects the `req` and `res` objects.\n\nRendering a view with this utility will fetch the template, apply the data model, and call `res.render()` to render the view inside of the global html page template.\n\n```\nvar express = require('express'),\n    router = express.Router(),\n    renderView = require('shared-utils/render-view');\n\nrouter.route('/').get(function(req, res){\n\n\t//data that you will pass to the model\n\tvar data = {};\n\n\t//local variables are processed by the html page template\n\tvar locals = {\n\n\t\t//title of the html document\n\t\ttitle: 'Title of HTML Page',\n\n\t\t//require js config file to include on the page\n\t\tjs: ['config/list'],\n\n\t\t//css files to include on the page\n\t\tcss: ['list']\n\t}\n\n\t/**\n\t * renderView\n\t * @param req {object} node express request object\n\t * @param res {object} node express response object\n\t * @param template {string} name of template/model pair\n\t * @param data {object} data being passed into model\n\t * @param locals {object} local variables object to pass to wrapper template\n\t */\n\trenderView(req, res, 'view-name', data, locals);\n});\n```\n\n##Logging\n\nFor logging, we are using [winston](https://github.com/winstonjs/winston).\n\nTo use the logger, include constants and then use `getLog()`.\n\n###getLog()\n\n```\nvar c = require('shared-config/constants');\n\n/**\n * getLog\n * @param location {string} the location that the logger is being used\n * @returns log {function} returns wrapped log function\n */\nvar log = c.getLog('shared-utils/mongo-db');\n```\n\n###log()\n```\n/**\n * getLog\n * @param level {string} the level of the log (info, warn, error, ...)\n * @param message {string} the error message\n * @param data {object} a json data object with additional information\n */\nlog('error', 'something went wrong', err);\n```\n\n###Log Levels\n\nThe three logging levels are `trace`, `info`, and `error`.\n\n###Log Output\n\nLogs that are level `info` or `error` will output into the `/log` directory, while all levels will output to the console.\n\nLogs in the `/log` directory are named `yyyymmdd.log`.\n\n##Requirement Documentation\nJSON Schema - [json-schema](http://json-schema.org/), [jsonschema node module](https://www.npmjs.com/package/jsonschema)\n\nDatabase - [mongo db](http://docs.mongodb.org/manual/)\n\nDatabase API - [mongo db node api](https://github.com/mongodb/node-mongodb-native)\n\nDatabase GUI - [mongohub](http://mongohub.todayclose.com/download), [list of mongo guis](http://docs.mongodb.org/ecosystem/tools/administration-interfaces/)\n\nApp Framework - [node express](http://expressjs.com/4x/api.html)\n\nTemplates - [mustache](https://github.com/janl/mustache.js)\n\nLogging - [winston](https://github.com/winstonjs/winston)\n\nPromises - [q](https://github.com/kriskowal/q)\n\nLanguage File Names - [IETF](http://en.wikipedia.org/wiki/IETF_language_tag)\n\n##Features\n\n###List\n\nList of entries.\n\n[http://localhost:3000/list](http://localhost:3000/list)\n\n[template](https://github.com/JustOpenSource/fatalshootings/blob/master/shared-views/fatality-list.html) | [model](https://github.com/JustOpenSource/fatalshootings/blob/master/shared-views/fatality-list.js)\n\n####Filters\n\nFilters that limit the list, controlled by url query paramters.\n\nCurrently supports: name, race, cause, sex, state\n\nhttp://localhost:3000/list?race=African-American/Black&cause=gunshot&sex=male&state=CT\n\n[template](https://github.com/JustOpenSource/fatalshootings/blob/master/shared-views/fatality-list-filter.html) | [model](https://github.com/JustOpenSource/fatalshootings/blob/master/shared-views/fatality-list-filter.js)\n\n####Pagination\n\nPagination is controlled with the url query parameters `limit` (entries per page) and `page` (current page number).\n\n[http://localhost:3000/list?limit=10&page=3](http://localhost:3000/list?limit=10&page=3)\n\n[template](https://github.com/JustOpenSource/fatalshootings/blob/master/shared-views/components/pagination.html) | [model](https://github.com/JustOpenSource/fatalshootings/blob/master/shared-views/components/pagination.js)\n\n####Responsiveness\n\nControlled via boostrap.\n\n####Sort\n\nComing Soon.\n","markerStore":{"nextMarkerId":61,"markersById":{"0":{"range":{"start":{"row":56,"column":15},"end":{"row":56,"column":15}},"properties":{"type":"selection","editorId":4,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"60":{"range":{"start":{"row":47,"column":0},"end":{"row":49,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false}},"version":2},"history":{"version":2,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/sanoy/code/fatalshootings/fatalshootings/README.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"6638ab07d3b31024486fc3ec096489e6802bf16b","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":true,"scrollTop":885,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sanoy/code/fatalshootings/fatalshootings/README.md","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/sanoy/code/fatalshootings/fatalshootings/README.md","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-gfm","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/sanoy/code/fatalshootings/fatalshootings/README.md":1440968490174},"metrics":{"sessionLength":44229297},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/sanoy/code/fatalshootings/fatalshootings":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"_admin":{"isExpanded":true,"entries":{"bin":{"isExpanded":false,"entries":{}},"public":{"isExpanded":false,"entries":{}},"routes":{"isExpanded":false,"entries":{}},"views":{"isExpanded":false,"entries":{}}}},"_sys-admin":{"isExpanded":true,"entries":{"bin":{"isExpanded":false,"entries":{}},"db":{"isExpanded":false,"entries":{}},"public":{"isExpanded":false,"entries":{}},"routes":{"isExpanded":false,"entries":{}},"views":{"isExpanded":false,"entries":{}}}},"admin":{"isExpanded":true,"entries":{"bin":{"isExpanded":false,"entries":{}},"public":{"isExpanded":false,"entries":{}},"routes":{"isExpanded":false,"entries":{}}}},"explore":{"isExpanded":true,"entries":{"bin":{"isExpanded":false,"entries":{}},"public":{"isExpanded":false,"entries":{}},"routes":{"isExpanded":false,"entries":{}}}},"lang":{"isExpanded":false,"entries":{}},"log":{"isExpanded":false,"entries":{}},"node_modules":{"isExpanded":false,"entries":{}},"shared-config":{"isExpanded":false,"entries":{}},"shared-utils":{"isExpanded":false,"entries":{}},"shared-views":{"isExpanded":false,"entries":{}},"sys-admin":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/sanoy/code/fatalshootings/fatalshootings/_admin","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":349,"width":200}}}