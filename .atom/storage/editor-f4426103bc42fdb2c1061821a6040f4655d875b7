{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":23,"width":1440,"height":873,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/sanoy/code/high-ground-alert"],"buffers":[{"text":"var path = require('path');\nvar fs = require('fs');\nvar server = require('http').createServer(handler);\nvar open = require('open');\n\nvar mime = {\n    'css'   : 'text/css',\n    'html'  : 'text/html',\n    'png'   : 'image/png',\n    'js'    : 'application/javascript',\n    'woff'  : 'application/x-font-woff'\n};\n\nfunction handler(req, res) {\n    var url = (req.url.split('?')[0]).substr(1);\n    if (url == '') url = 'index.html';\n\n    var exploded = url.split('.');\n    var contentType = mime[exploded[exploded.length - 1]] || 'application/octet-stream';\n\n    res.setHeader('Content-Type', contentType);\n    console.log('GET', url);\n\n    fs.readFile(\n      path.join(process.cwd(), url),\n        function (err, data) {\n            if (err) {\n                res.writeHead(404);\n                return res.end('Error loading ' + url);\n            }\n            res.writeHead(200);\n            res.end(data);\n        }\n    );\n}\n\nserver.listen(process.env.PORT || 5000);\nconsole.log('go to localhost:5000');\nopen('http://localhost:5000/');\n","markerStore":{"nextMarkerId":5,"markersById":{"0":{"range":{"start":{"row":9,"column":32},"end":{"row":9,"column":32}},"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/sanoy/code/high-ground-alert/index.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4c8763bb79be90432685b6c03fa61cfd2ca9c4d7","deserializer":"TextBuffer","version":2},{"text":"\n\n(function() {\n\n    L.Icon.Default.imagePath = '/node_modules/leaflet/dist/images';\n\n    // The map\n    var leaf = null;\n\n    // The mudflow polygon\n    var mudflow;\n\n    // The official evacuation points and routes\n    var evacPointsJson;\n    var evacRoutesJson;\n\n    // Geocoder to turn address into coords\n    var geocoder = new google.maps.Geocoder();\n\n    // For icon clicks and hovers\n    var clicked, timeout;\n\n\n    var markers = new L.FeatureGroup();\n    function setPosition(position) {\n        var coords = new L.LatLng(position.latitude, position.longitude);\n        try {\n            if (leaf) {\n                // Remove previous markers\n                leaf.removeLayer(markers);\n\n                // Make new markers\n                markers = new L.FeatureGroup();\n\n                // Make and append the marker\n                var marker = L.marker(coords);\n\n                markers.addLayer(marker);\n                leaf.addLayer(markers);\n                leaf.setView(coords, leaf.getZoom());\n\n                if (inADangerZone(position)) {\n                    marker\n                        .bindPopup('You are in a danger zone!')\n                        .openPopup();\n                } else {\n                    marker\n                        .bindPopup('You are safe.')\n                        .openPopup();\n                }\n            }\n        } catch(e) {\n            console.warn(e);\n        }\n    }\n\n    function inADangerZone(position) {\n        var point = {\"type\":\"Point\",\"coordinates\":[position.longitude, position.latitude]};\n        var polygons = mudflow.features;\n        for (var i = 0; i < polygons.length; i++) {\n            console.log('checking polygon', i+1);\n            if (gju.pointInPolygon(point, polygons[i].geometry)) {\n                findNearestEvacPoint(point);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function findNearestEvacPoint(point) {\n      var userLocation = {\"type\":\"Point\",\"coordinates\":[position.longitude, position.latitude]};\n      var evacPoints = evacPointsJson.features;\n      var nearestPoint = null;\n      var nearestDistance = Number.POSITIVE_INFINITY;\n      for (var mp = 0; mp < multiPoints.length; mp++) {\n            console.log('checking multiPoint: %d', mp+1);\n\n            var coordinates = evacPoints[mp].geometry.coordinates;\n            for (var c = 0; c < coordinates.length; c++) {\n                var currentPoint = {type: 'Point', coordinates:coordinates[c]};\n                var distance = gju.pointDistance(userLocation, currentPoint);\n                console.log('distance: %d calculated to point: %d', distance, c+1);\n                if (distance < nearestDistance) {\n                    nearestDistance = distance;\n                    nearestPoint = currentPoint;\n                }\n            }\n        }\n        return nearestPoint;\n    }\n\n    var tiles = {\n        standard        : 'http://{s}.tile.osm.org/{z}/{x}/{y}.png',\n        humanitarian    : 'http://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',\n        watercolor      : 'http://{s}.tile.stamen.com/watercolor/{z}/{x}/{y}.jpg',\n        sketchy         : 'https://{s}.tiles.mapbox.com/v3/aj.Sketchy2/{z}/{x}/{y}.png',\n        cartodb         : 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png'\n    };\n\n    var Map = React.createClass({\n        getInitialState: function() {\n            return {\n                tile: tiles.cartodb\n            };\n        },\n        componentDidMount: function() {\n\n            // leaf = L.map('map').setView([1,1], 16);\n            // this.setState({\n            //     map: leaf\n            // });\n            //\n            leaf = L.map('map', {\n                center: [46.823873, -121.693061],\n                zoom: 9\n            });\n\n            leaf.locate({\n                setView: true\n            });\n\n            L.tileLayer(this.state.tile, {\n                attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            }).addTo(leaf);\n\n            $.getJSON('/mudflow.json').then(function (json) {\n                mudflow = json;\n\n                L.geoJson(json, {\n                    style: function (feature) {\n                        return {\n                            color: 'red'\n                        };\n                    }\n                }).addTo(leaf);\n            });\n\n            $.getJSON('/full-evac-routes.json').then(function (json) {\n                evacRoutesJson = json;\n\n                L.geoJson(json, {\n                    style: function (feature) {\n                        return {\n                            color: 'blue'\n                        };\n                    }\n                }).addTo(leaf);\n            });\n\n            $.getJSON('/evac_rtes_case1_intersect_pts_wgs84.json').then(function (json) {\n                evacPointsJson = json;\n\n                L.geoJson(json, {\n                    style: function (feature) {\n                        return {\n                            color: 'green'\n                        };\n                    }\n                }).addTo(leaf);\n            });\n\n        },\n        render: function() {\n\n            return (\n                // Keep opened user selected\n                <div id=\"map\"></div>\n            );\n        }\n    });\n\n    function attachListenersToLayer(featureLayer) {\n        featureLayer.on('mouseover', function(e){\n            if (!clicked) {\n                clearTimeout(timeout);\n                e.layer.openPopup();\n            }\n        });\n        featureLayer.on('mouseout', function (e) {\n            if (!clicked) {\n                //timeout = setTimeout(function() {\n                e.layer.closePopup();\n                //}, 500);\n            }\n        });\n        featureLayer.on('click', function (e) {\n            if (!clicked) {\n                //clearTimeout(timeout);\n                clicked = true;\n                e.layer.openPopup();\n            } else {\n                clicked = false;\n                e.layer.closePopup();\n            }\n        });\n        featureLayer.on('popupclose', function(e) {\n            clicked = false;\n        });\n    }\n\n    var Search = React.createClass({\n        getInitialState: function() {\n            return {\n                address: ''\n            };\n        },\n        searchAddress: function(e) {\n            e.preventDefault();\n            if (!this.state.address || this.state.address.length < 3) return alert('Please enter a valid address!');\n\n\n            geocoder.geocode({ 'address': this.state.address }, handleGeocode);\n\n            function handleGeocode(results, status) {\n                if (status == google.maps.GeocoderStatus.OK) {\n                    console.log(results);\n\n                    var position = {\n                        latitude: results[0].geometry.location.lat(),\n                        longitude: results[0].geometry.location.lng()\n                    };\n\n                    setPosition(position);\n                } else {\n                    alert('Geocode was not successful for the following reason: ' + status);\n                }\n            }\n        },\n        detectLocation: function(e) {\n            e.preventDefault();\n            var watch = navigator.geolocation.watchPosition(success, failure);\n            function success(position) {\n                setPosition(position.coords);\n                navigator.geolocation.clearWatch(watch);\n            }\n            function failure(error) {\n                alert(error);\n            }\n        },\n        updateAddress: function(e, val) {\n            this.setState({ address: e.target.value });\n        },\n        render: function() {\n\n            return (\n                <form className=\"search\" onSubmit={this.searchAddress}>\n                    <input placeholder=\"Street Address\" onChange={this.updateAddress} value={this.state.address} />\n                    <button onClick={this.searchAddress}>Search</button>\n                    <button onClick={this.detectLocation}>Detect</button>\n                </form>\n            );\n        }\n    });\n\n    var Page = React.createClass({\n        render: function() {\n\n            return (\n                <div>\n                    <Map />\n                    <Search />\n                </div>\n            );\n        }\n    });\n\n    React.render(<Page />, document.getElementById('main'));\n\n})();\n","markerStore":{"nextMarkerId":23,"markersById":{"0":{"range":{"start":{"row":12,"column":10},"end":{"row":12,"column":10}},"properties":{"type":"selection","editorId":8,"goalScreenRange":null,"preserveFolds":true},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":25,"undoStack":[],"redoStack":[{"type":"group-end","snapshot":{"0":{"range":[[94,8],[94,8]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null,"preserveFolds":true},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[94,8],[94,82]],"newRange":[[94,8],[94,8]],"oldText":"watercolor      : 'http://{s}.tile.stamen.com/watercolor/{z}/{x}/{y}.jpg',","newText":""}},{"type":"group-start","snapshot":{"0":{"range":[[94,8],[94,82]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null,"preserveFolds":true},"reversed":true,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}}]},"encoding":"utf8","filePath":"/Users/sanoy/code/high-ground-alert/app.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e145ec56538cd2326373922ca9ddbf9140997d65","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":false,"scrollTop":96,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sanoy/code/high-ground-alert/index.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":false,"scrollTop":63,"scrollLeft":1,"tokenizedBuffer":{"bufferPath":"/Users/sanoy/code/high-ground-alert/app.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/sanoy/code/high-ground-alert/app.js","focused":false,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-javascript","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/sanoy/code/high-ground-alert/index.js":1440791324850,"/Users/sanoy/code/high-ground-alert/app.js":1440791401669},"metrics":{"sessionLength":299872261},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/sanoy/code/high-ground-alert":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"node_modules":{"isExpanded":true,"entries":{"geojson-utils":{"isExpanded":false,"entries":{}},"jquery":{"isExpanded":false,"entries":{}},"leaflet":{"isExpanded":true,"entries":{"build":{"isExpanded":false,"entries":{}},"debug":{"isExpanded":false,"entries":{}},"dist":{"isExpanded":true,"entries":{"images":{"isExpanded":true,"entries":{}}}},"spec":{"isExpanded":false,"entries":{}},"src":{"isExpanded":false,"entries":{}}}},"open":{"isExpanded":false,"entries":{}},"react":{"isExpanded":false,"entries":{}}}}}}},"selectedPath":"/Users/sanoy/code/high-ground-alert/app.js","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":364},"keybinding-resolver":{}}}